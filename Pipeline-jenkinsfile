pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "cision/nginx:latest"
        DOCKERHUB_CREDENTIALS = 'dockerhub-credentials-id'
        KUBECONFIG_CREDENTIAL_ID = 'kubeconfig-id'
        SONARQUBE_SERVER = 'sonarqube-server-id'
        SONARQUBE_TOKEN = credentials('sonarqube-token-id') // Ensure secure storage and minimal permissions
        KUBE_NAMESPACE = 'default' // Ensure this is set correctly for production
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        retry(3)
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/venkatesh-6667/cision-tasks.git'
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh 'sonar-scanner -Dsonar.projectKey=nginx-app -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONARQUBE_TOKEN'
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build(DOCKER_IMAGE)
                }
            }
        }

        stage('Run Security Checks') {
            parallel {
                stage('Trivy Scan') {
                    steps {
                        script {
                            sh 'docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):/app aquasec/trivy image ${DOCKER_IMAGE}'
                        }
                    }
                }
                stage('Snyk Scan') {
                    steps {
                        script {
                            sh 'docker run --rm -v /var/run/docker.sock:/var/run/docker.sock snyk/snyk-cli:docker snyk test --docker ${DOCKER_IMAGE}'
                        }
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com/', DOCKERHUB_CREDENTIALS) {
                        docker.image(DOCKER_IMAGE).push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    try {
                        kubernetesDeploy(
                            configs: 'k8s/deployment.yaml',
                            kubeconfigId: KUBECONFIG_CREDENTIAL_ID,
                            enableConfigSubstitution: true
                        )
                    } catch (Exception e) {
                        echo "Deployment failed: ${e.message}"
                        // Optional: Add a rollback step here if needed
                        throw e
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment succeeded!'
            // Notify team of successful deployment
            // slackSend(channel: '#deployments', message: 'Deployment succeeded!')
        }
        failure {
            echo 'Deployment failed!'
            // Notify team of failure
            // slackSend(channel: '#deployments', message: 'Deployment failed!')
        }
        always {
            cleanWs()
        }
    }
}
